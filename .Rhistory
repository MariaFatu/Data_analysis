mean(test$value_eur)
library(rsample)
library(tidyverse)
library(caret)
library(modelr)
library(ISLR)
library(DataExplorer)
library(stringr)
library(AICcmodavg)
library(Metrics)
library(rpart)
library(rpart.plot)
library(caret)
library(dplyr)
install.packages('DataExplorer')
install.packages("AICcmodavg")
install.packages('DataExplorer')
install.packages("DataExplorer")
#fifa 20 football players stats
players = read.csv("players_20.csv")
head(players)
#dataset too big for table
players
#dimensions of the table, 18278 obs and 104 vars, too much unneeded info
dim(players)
mean(subset(players$value_eur, players$international_reputation == 5))
mean(subset(players$value_eur, players$international_reputation == 4))
mean(subset(players$value_eur, players$international_reputation == 3))
mean(subset(players$value_eur, players$international_reputation == 2))
mean(subset(players$value_eur, players$international_reputation == 1))
#vars values and types, clean needed
glimpse(players)
#summary of the dataset
summary(players)
#explore data with a complete report containing
#basic statistics, structure, missing data, distribution visualizations,
#correlation matrix and principal component analysis
DataExplorer::create_report(players)
dim(players)
summary(players)
#get main position of each player
positions = reshape2::colsplit(players$player_positions,",", c('main_position','others'))
players = players %>%
mutate(main_position = positions$main_position, .after = wage_eur)
#eliminate vars that do not help with the analysis
players = select(players, age:goalkeeping_reflexes)
#explore data with a complete report containing
#basic statistics, structure, missing data, distribution visualizations,
#correlation matrix and principal component analysis
DataExplorer::create_report(players)
1 - 760422.2/2383658
library(rsample)
library(tidyverse)
library(caret)
library(modelr)
library(ISLR)
library(DataExplorer)
library(stringr)
library(AICcmodavg)
library(Metrics)
#fifa 20 football players stats
players = read.csv("players_20.csv")
head(players)
#dataset too big for table
players
#dimensions of the table, 18278 obs and 104 vars, too much unneeded info
dim(players)
mean(subset(players$value_eur, players$international_reputation == 5))
mean(subset(players$value_eur, players$international_reputation == 4))
mean(subset(players$value_eur, players$international_reputation == 3))
mean(subset(players$value_eur, players$international_reputation == 2))
mean(subset(players$value_eur, players$international_reputation == 1))
#vars values and types, clean needed
glimpse(players)
#summary of the dataset
summary(players)
dim(players)
summary(players)
#get main position of each player
positions = reshape2::colsplit(players$player_positions,",", c('main_position','others'))
players = players %>%
mutate(main_position = positions$main_position, .after = wage_eur)
#eliminate vars that do not help with the analysis
players = select(players, age:goalkeeping_reflexes)
#eliminate vars that do not help with the analysis
players = select(players, -c(
nationality,
player_tags,
player_positions,
team_position,
team_jersey_number,
dob,
nation_position,
real_face,
contract_valid_until,
release_clause_eur,
weight_kg,
preferred_foot,
work_rate,
body_type,
height_cm,
player_traits,
joined,
loaned_from,
club,
contract_valid_until,
nation_jersey_number,
body_type))
#map international_reputation to factor, because it represents the level of being worldwide known
players$international_reputation =factor(players$international_reputation, labels = c('Unknown','Little known', 'Known', 'Well known','Best known'))
labels(players$international_reputation)
#map skill_moves to factor, because it represents the level of being technically gifted
players$skill_moves =factor(players$skill_moves, labels = c('Skilless','Little skillful', 'Skillful', 'More skillful','Most skillful'))
#map weak_foot to factor, because it represents how well you can use your weaker foot compared to preferred one
players$weak_foot =factor(players$weak_foot, labels = c('Unuseable','Little useable', 'Useable', 'More useable','Most useable'))
#map main_position to factor, because it represents player positions; no order needed
players$main_position =factor(players$main_position)
#check
levels(players$main_position)
#eliminate goalies; main set is too heterogeneous
players = subset(players, main_position != 'GK')
#remove goalies attributes for a homogeneous set of data
players = select(players, -starts_with("gk"))
#refactor to eliminate GK
players$main_position =factor(players$main_position)
#check
levels(players$main_position)
#check data analysis
DataExplorer::create_report(players)
#check on age histogram
length(unique(players$age))
#?? why gap as there are values there too; 27 diff values
ggplot(players, aes(age)) + geom_histogram(bins = 27)
#correlation might exist; linear
players %>%
ggplot(aes(wage_eur, value_eur)) + geom_point() + geom_smooth()
library(rsample)
library(tidyverse)
library(dplyr)
library(rpart) # necesar pentru CART Decision Trees
library(rpart.plot)
library(caret)
library(randomForest)
library(ipred)
library(ranger)
#simple tree
modelSimpleTree = rpart(
formula = value_eur ~ .,
data = train,
method = "anova",
)
#visualise results
modelSimpleTree
rpart.plot(modelSimpleTree)
#simple tree
modelSimpleTree = rpart(
formula = value_eur ~ .,
data = train,
method = "anova",
)
set.seed(123)
split = initial_split(players, prop = 0.7, strata = "value_eur")
train = training(split)
test = testing(split)
mean(train$value_eur)
mean(test$value_eur)
table(players$main_position)
#simple tree
modelSimpleTree = rpart(
formula = value_eur ~ .,
data = train,
method = "anova",
)
#visualise results
modelSimpleTree
rpart.plot(modelSimpleTree)
#visualise cp
plotcp(modelSimpleTree)
modelSimpleTree$cptable
modelSimpleTree$cptable
View(players)
